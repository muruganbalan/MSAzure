{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "azdevazuredatafactory"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_COPY_WIZARD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "THIS COPY ACTIVITY IS FOR COPYING A TABLE FROM ONE SQL SERVER DATABASE TO THE OTHER DATABASE.",
				"activities": [
					{
						"name": "CPY_WIZARD",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "SalesLT.CustomerAddress"
							},
							{
								"name": "Destination",
								"value": "dbo.CustomerAddress"
							}
						],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CustomerID",
											"type": "Int32"
										},
										"sink": {
											"name": "CustomerID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "AddressID",
											"type": "Int32"
										},
										"sink": {
											"name": "AddressID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "AddressType",
											"type": "String"
										},
										"sink": {
											"name": "AddressType",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "rowguid",
											"type": "Guid"
										},
										"sink": {
											"name": "rowguid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ASQL_SRC_OLTP",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_TGT_OLAP",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_CUSTOMER_JSON_TO_CSV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ACT_COPY_FROM_BLOB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "customerID",
											"type": "Int64"
										},
										"sink": {
											"name": "customerID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "status",
											"type": "Boolean"
										},
										"sink": {
											"name": "status",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "deleted",
											"type": "Boolean"
										},
										"sink": {
											"name": "deleted",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "marketViaEmail",
											"type": "Boolean"
										},
										"sink": {
											"name": "marketViaEmail",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "marketViaMail",
											"type": "Boolean"
										},
										"sink": {
											"name": "marketViaMail",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "doNotRentEmail",
											"type": "Boolean"
										},
										"sink": {
											"name": "doNotRentEmail",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "doNotRentMail",
											"type": "Boolean"
										},
										"sink": {
											"name": "doNotRentMail",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "firstVisit",
											"type": "String"
										},
										"sink": {
											"name": "firstVisit",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "lastVisit",
											"type": "String"
										},
										"sink": {
											"name": "lastVisit",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "group",
											"type": "String"
										},
										"sink": {
											"name": "group",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "prefix",
											"type": "String"
										},
										"sink": {
											"name": "prefix",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "firstName",
											"type": "String"
										},
										"sink": {
											"name": "firstName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "lastName",
											"type": "String"
										},
										"sink": {
											"name": "lastName",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "gender",
											"type": "String"
										},
										"sink": {
											"name": "gender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "birthMonth",
											"type": "String"
										},
										"sink": {
											"name": "birthMonth",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "birthDay",
											"type": "String"
										},
										"sink": {
											"name": "birthDay",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "address",
											"type": "String"
										},
										"sink": {
											"name": "address",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "city",
											"type": "String"
										},
										"sink": {
											"name": "city",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "state",
											"type": "String"
										},
										"sink": {
											"name": "state",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "postalCode",
											"type": "String"
										},
										"sink": {
											"name": "postalCode",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "country",
											"type": "String"
										},
										"sink": {
											"name": "country",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "email",
											"type": "String"
										},
										"sink": {
											"name": "email",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "workphone",
											"type": "String"
										},
										"sink": {
											"name": "workphone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "homephone",
											"type": "String"
										},
										"sink": {
											"name": "homephone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "mobilephone",
											"type": "String"
										},
										"sink": {
											"name": "mobilephone",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "extCustomerId",
											"type": "String"
										},
										"sink": {
											"name": "extCustomerId",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "ds_json",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "json_Parsed",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_MOMENTIVE_CATEGORIZE_FILES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is for connecting to the momentive source raw files (prod_raw_area) and split the source files according to the pattern we define into the prod_staging_area",
				"activities": [
					{
						"name": "rawMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_MOMENTIVE_RAW_SOURCE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"lastModified",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "forEachRawFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "rawMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('rawMetadata').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "copyPatternFiles",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_ABLB_NEW_SOURCE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_MOMENTIVE_REQUIRED_AREA",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "Momentive"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_PATTERN_NEW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "rawMetadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_ABLB_MOMENTIVE_RAW_SOURCE",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							}
						}
					},
					{
						"name": "forEachRawFiles",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "rawMetadata",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('rawMetadata').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "copyPatternFiles",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_ABLB_NEW_SOURCE",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ABLB_MOMENTIVE_REQUIRED_AREA",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"folder": {
					"name": "Momentive"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_PROCESS_TRANSACTION')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "This pipeline is for extracting Nested JSON data from Azure Blob Storage for Data Cleansing.",
				"activities": [
					{
						"name": "ACT_COPYFROM_BLOB",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BlobSource",
								"recursive": true
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "transaction_id",
											"type": "Int64"
										},
										"sink": {
											"name": "transaction_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "location_id",
											"type": "Int64"
										},
										"sink": {
											"name": "location_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "transaction_type",
											"type": "String"
										},
										"sink": {
											"name": "transaction_type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "customer_id",
											"type": "Int64"
										},
										"sink": {
											"name": "customer_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "date",
											"type": "String"
										},
										"sink": {
											"name": "date",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "currency",
											"type": "String"
										},
										"sink": {
											"name": "currency",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "transaction_line_id"
										},
										"sink": {
											"name": "transaction_line_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "provider_id"
										},
										"sink": {
											"name": "provider_id",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "provider_name",
											"type": "String"
										},
										"sink": {
											"name": "provider_name",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "type",
											"type": "String"
										},
										"sink": {
											"name": "type",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sku",
											"type": "String"
										},
										"sink": {
											"name": "sku",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "product_class"
										},
										"sink": {
											"name": "produt_class",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "product_subclass",
											"type": "String"
										},
										"sink": {
											"name": "product_subclass",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "description",
											"type": "String"
										},
										"sink": {
											"name": "description",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "sold_price",
											"type": "Double"
										},
										"sink": {
											"name": "sold_price",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ABLB",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_CSV_TRANSACTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ACT_ADB_CLEANSING",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ACT_COPYFROM_BLOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Users/681790@cognizant.com/Transactions"
						},
						"linkedServiceName": {
							"referenceName": "LS_ADB_CON",
							"type": "LinkedServiceReference"
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_WEBSITE_DATA_PULL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "webActivity",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://www.cognizant.com/",
							"method": "GET",
							"headers": {},
							"linkedServices": [
								{
									"referenceName": "Web1",
									"type": "LinkedServiceReference"
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ONPREM_SQLSERVER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREMSQL_SOURCE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "BusinessEntityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NationalIDNumber",
						"type": "nvarchar"
					},
					{
						"name": "LoginID",
						"type": "nvarchar"
					},
					{
						"name": "OrganizationNode",
						"type": "AdventureWorks2012.sys.hierarchyid"
					},
					{
						"name": "OrganizationLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "JobTitle",
						"type": "nvarchar"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "Gender",
						"type": "nchar"
					},
					{
						"name": "HireDate",
						"type": "date"
					},
					{
						"name": "SalariedFlag",
						"type": "bit"
					},
					{
						"name": "VacationHours",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SickLeaveHours",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CurrentFlag",
						"type": "bit"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "HumanResources",
					"table": "Employee"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ONPREM_SQLSERVER_')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREMSQL_SOURCE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "BusinessEntityID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NationalIDNumber",
						"type": "nvarchar"
					},
					{
						"name": "LoginID",
						"type": "nvarchar"
					},
					{
						"name": "OrganizationNode",
						"type": "AdventureWorks2012.sys.hierarchyid"
					},
					{
						"name": "OrganizationLevel",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "JobTitle",
						"type": "nvarchar"
					},
					{
						"name": "BirthDate",
						"type": "date"
					},
					{
						"name": "MaritalStatus",
						"type": "nchar"
					},
					{
						"name": "Gender",
						"type": "nchar"
					},
					{
						"name": "HireDate",
						"type": "date"
					},
					{
						"name": "SalariedFlag",
						"type": "bit"
					},
					{
						"name": "VacationHours",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "SickLeaveHours",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "CurrentFlag",
						"type": "bit"
					},
					{
						"name": "rowguid",
						"type": "uniqueidentifier"
					},
					{
						"name": "ModifiedDate",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Employee1"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_CUSTOMER_ORDER')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_SRC_CUSTOMER",
								"type": "DatasetReference"
							},
							"name": "Customer",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_SALESHEADER",
								"type": "DatasetReference"
							},
							"name": "SalesHeader",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_TGT_CUSTOMERORDER",
								"type": "DatasetReference"
							},
							"name": "TargetSqlServer"
						}
					],
					"transformations": [
						{
							"name": "CustomerVsSalesOrder"
						},
						{
							"name": "AggCustomerOrders"
						}
					],
					"script": "\n\nsource(output(\n\t\tCustomerID as integer,\n\t\tNameStyle as boolean,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tSuffix as string,\n\t\tCompanyName as string,\n\t\tSalesPerson as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tPasswordHash as string,\n\t\tPasswordSalt as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Customer\nsource(output(\n\t\tSalesOrderID as integer,\n\t\tRevisionNumber as integer,\n\t\tOrderDate as timestamp,\n\t\tDueDate as timestamp,\n\t\tShipDate as timestamp,\n\t\tStatus as integer,\n\t\tOnlineOrderFlag as boolean,\n\t\tSalesOrderNumber as string,\n\t\tPurchaseOrderNumber as string,\n\t\tAccountNumber as string,\n\t\tCustomerID as integer,\n\t\tShipToAddressID as integer,\n\t\tBillToAddressID as integer,\n\t\tShipMethod as string,\n\t\tCreditCardApprovalCode as string,\n\t\tSubTotal as decimal(19,4),\n\t\tTaxAmt as decimal(19,4),\n\t\tFreight as decimal(19,4),\n\t\tTotalDue as decimal(19,4),\n\t\tComment as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> SalesHeader\nCustomer, SalesHeader join(Customer@CustomerID == SalesHeader@CustomerID,\n\tjoinType:'left',\n\tbroadcast: 'none')~> CustomerVsSalesOrder\nCustomerVsSalesOrder aggregate(groupBy(Customer@CustomerID),\n\tNumberOfOrders = count(SalesOrderID),\n\t\tTotalOrderAmount = sum(TotalDue)) ~> AggCustomerOrders\nAggCustomerOrders sink(input(\n\t\tCustomerId as integer,\n\t\tNumberOfOrders as integer,\n\t\tTotalAmount as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tmapColumn(\n\t\tCustomerId = CustomerID,\n\t\tNumberOfOrders,\n\t\tTotalAmount = TotalOrderAmount\n\t)) ~> TargetSqlServer"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SALESORDERANALYTICS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SalesData",
								"type": "DatasetReference"
							},
							"name": "SalesOrderSource",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Rank_by_Month",
								"type": "DatasetReference"
							},
							"name": "RankMonthSink"
						}
					],
					"transformations": [
						{
							"name": "GetRequiredData"
						},
						{
							"name": "DeriveMonthYear"
						},
						{
							"name": "TotalAggregate"
						},
						{
							"name": "RankByMonth"
						}
					],
					"script": "\nparameters{\n\tYear as integer (2016)\n}\nsource(output(\n\t\tSalesOrderID as integer,\n\t\tSalesOrderDetailID as integer,\n\t\tOrderQty as integer,\n\t\tProductID as integer,\n\t\tUnitPrice as decimal(10,0),\n\t\tUnitPriceDiscount as decimal(10,0),\n\t\tLineTotal as decimal(10,0),\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: true,\n\tinferDriftedColumnTypes: true,\n\tskipLines: 1,\n\twildcardPaths:['DataLakeCleansing/raw/sales/\\'+$Year+\\'/**/*.txt']) ~> SalesOrderSource\nSalesOrderSource select(mapColumn(\n\t\tSalesOrderID,\n\t\tSalesOrderDetailID,\n\t\tOrderQty,\n\t\tProductID,\n\t\tUnitPrice,\n\t\tUnitPriceDiscount,\n\t\tLineTotal,\n\t\tModifiedDate\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> GetRequiredData\nGetRequiredData derive(OrderedDate_Month = month(ModifiedDate),\n\t\tOrderedDate_Year = year(ModifiedDate)) ~> DeriveMonthYear\nDeriveMonthYear aggregate(groupBy(OrderedDate_Month,\n\t\tOrderedDate_Year),\n\tTotal = sum((UnitPrice)*(OrderQty))) ~> TotalAggregate\nTotalAggregate window(over(OrderedDate_Month),\n\tdesc(Total, false),\n\tRanking = denseRank(Total)) ~> RankByMonth\nRankByMonth sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['Rank_by_Month.txt'],\n\tpartitionBy('hash', 1)) ~> RankMonthSink"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SCD_TYP1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_TGT_CUSTOMER",
								"type": "DatasetReference"
							},
							"name": "AzureSqlDimCustomer",
							"typeProperties": {}
						},
						{
							"dataset": {
								"referenceName": "DS_ASQL_SRC_CUSTOMER",
								"type": "DatasetReference"
							},
							"name": "AzureSqlSrcCustomer",
							"typeProperties": {}
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ASQL_TGT_CUSTOMER",
								"type": "DatasetReference"
							},
							"name": "AzureSqlTgtTable"
						}
					],
					"transformations": [
						{
							"name": "HashKey"
						},
						{
							"name": "RecordExists"
						},
						{
							"name": "LkpCustomer"
						},
						{
							"name": "CreateAuditColumns"
						},
						{
							"name": "Upsert"
						}
					],
					"script": "\n\nsource(output(\n\t\tCustomerID as integer,\n\t\tNameStyle as string,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tSuffix as string,\n\t\tCompanyName as string,\n\t\tSalesPerson as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tPasswordHash as string,\n\t\tPasswordSalt as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp,\n\t\tInsertedDate as timestamp,\n\t\tUpdatedDate as timestamp,\n\t\tHashKey as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AzureSqlDimCustomer\nsource(output(\n\t\tCustomerID as integer,\n\t\tNameStyle as boolean,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tSuffix as string,\n\t\tCompanyName as string,\n\t\tSalesPerson as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tPasswordHash as string,\n\t\tPasswordSalt as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> AzureSqlSrcCustomer\nAzureSqlSrcCustomer derive(HashKey = sha1(FirstName+LastName+CompanyName)) ~> HashKey\nHashKey, AzureSqlDimCustomer exists(HashKey@HashKey == AzureSqlDimCustomer@HashKey,\n\tnegate:true,\n\tbroadcast: 'none')~> RecordExists\nRecordExists, AzureSqlDimCustomer lookup(AzureSqlSrcCustomer@CustomerID == AzureSqlDimCustomer@CustomerID,\n\tbroadcast: 'none')~> LkpCustomer\nLkpCustomer derive(InsertedDate = iif(isNull(InsertedDate),currentTimestamp(),{InsertedDate}),\n\t\tUpdatedDate = currentTimestamp()) ~> CreateAuditColumns\nCreateAuditColumns alterRow(upsertIf(true())) ~> Upsert\nUpsert sink(input(\n\t\tCustomerID as integer,\n\t\tNameStyle as string,\n\t\tTitle as string,\n\t\tFirstName as string,\n\t\tMiddleName as string,\n\t\tLastName as string,\n\t\tSuffix as string,\n\t\tCompanyName as string,\n\t\tSalesPerson as string,\n\t\tEmailAddress as string,\n\t\tPhone as string,\n\t\tPasswordHash as string,\n\t\tPasswordSalt as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp,\n\t\tInsertedDate as timestamp,\n\t\tUpdatedDate as timestamp,\n\t\tHashKey as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:false,\n\tupsertable:true,\n\tformat: 'table',\n\tkeys:['CustomerID'],\n\tmapColumn(\n\t\tCustomerID = AzureSqlSrcCustomer@CustomerID,\n\t\tNameStyle = AzureSqlSrcCustomer@NameStyle,\n\t\tTitle = AzureSqlSrcCustomer@Title,\n\t\tFirstName = AzureSqlSrcCustomer@FirstName,\n\t\tMiddleName = AzureSqlSrcCustomer@MiddleName,\n\t\tLastName = AzureSqlSrcCustomer@LastName,\n\t\tSuffix = AzureSqlSrcCustomer@Suffix,\n\t\tCompanyName = AzureSqlSrcCustomer@CompanyName,\n\t\tSalesPerson = AzureSqlSrcCustomer@SalesPerson,\n\t\tEmailAddress = AzureSqlSrcCustomer@EmailAddress,\n\t\tPhone = AzureSqlSrcCustomer@Phone,\n\t\tPasswordHash = AzureSqlSrcCustomer@PasswordHash,\n\t\tPasswordSalt = AzureSqlSrcCustomer@PasswordSalt,\n\t\trowguid = AzureSqlSrcCustomer@rowguid,\n\t\tInsertedDate,\n\t\tUpdatedDate,\n\t\tHashKey = HashKey@HashKey\n\t)) ~> AzureSqlTgtTable"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ONPREM_POSTGRES')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_POSTGRES",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "PostgreSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": "actor"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DEMO_ADLS_GEN2_SALESORDERANALYTICS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "THIS PIPELINE IS TO DEMONSTRATE USING AZURE DATALAKE GEN2 (ADLS GEN2) WITH MAPPING DATAFLOW COMPONENT IN ADF.",
				"activities": [
					{
						"name": "DF_SALESORDERANALYTICS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SALESORDERANALYTICS",
								"type": "DataFlowReference",
								"parameters": {
									"Year": "2016"
								},
								"datasetParameters": {
									"SalesOrderSource": {},
									"RankMonthSink": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_SALESORDERANALYTICS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DW_ETL_SCD_TYPE1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "THIS PIPELINE IS TO DEMONSTRATE SCD TYPE 1 USING MAPPING DATA FLOW.",
				"activities": [
					{
						"name": "DF_SCD_TYP1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_SCD_TYP1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"AzureSqlDimCustomer": {},
									"AzureSqlSrcCustomer": {},
									"AzureSqlTgtTable": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_SCD_TYP1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_SHIR_ONPREM_COPY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "THIS PIPELINE IS FOR CONNECTING TO THE ONPREM SQL SERVER WITH SELF HOSTED INTERGRATION RUNTIME (SHIR) OPTION.",
				"activities": [
					{
						"name": "Copy_From_OnPrem_SQLServer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "BusinessEntityID",
											"type": "Int32"
										},
										"sink": {
											"name": "BusinessEntityID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NationalIDNumber",
											"type": "String"
										},
										"sink": {
											"name": "NationalIDNumber",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "LoginID",
											"type": "String"
										},
										"sink": {
											"name": "LoginID",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "JobTitle",
											"type": "String"
										},
										"sink": {
											"name": "JobTitle",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BirthDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "BirthDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "MaritalStatus",
											"type": "String"
										},
										"sink": {
											"name": "MaritalStatus",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Gender",
											"type": "String"
										},
										"sink": {
											"name": "Gender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "HireDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "HireDate",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "SalariedFlag",
											"type": "Boolean"
										},
										"sink": {
											"name": "SalariedFlag",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "VacationHours",
											"type": "Int16"
										},
										"sink": {
											"name": "VacationHours",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "SickLeaveHours",
											"type": "Int16"
										},
										"sink": {
											"name": "SickLeaveHours",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "CurrentFlag",
											"type": "Boolean"
										},
										"sink": {
											"name": "CurrentFlag",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ONPREM_SQLSERVER_",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_ASQL_TGT_PLAP_EMPLOYEE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ONPREM_SQLSERVER_')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_WITH_DATA_FLOW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "THIS PIPELINE IS TO DEMONSTRATE ON HOW WE CAN USE ADF MAPPING DATA FLOW WITHIN A PIPELINE",
				"activities": [
					{
						"name": "DF_CUSTOMER_ORDER",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_CUSTOMER_ORDER",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Customer": {},
									"SalesHeader": {},
									"TargetSqlServer": {}
								}
							},
							"staging": {}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_CUSTOMER_ORDER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LOAD_DELTA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GET_CFG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * from @{pipeline().parameters.ConfigTable}\nIF @@ROWCOUNT = 0 THROW 50000,'No rows in configuration table!',1"
							},
							"dataset": {
								"referenceName": "DS_ASQL_TGT_PARAMETERIZED",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dummy"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR_EACH_SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GET_MAX_SQL",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT MAX(CAST(@{item().WatermarkColumn} as date)) as maxd FROM @{item().SRC_tab}"
										},
										"dataset": {
											"referenceName": "DS_ONPREM_SQLSERVER",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "COPY SQL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_MAX_SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT \n @{item().Cols} FROM @{item().SRC_tab} \n \nWHERE \n\nCAST(@{item().WatermarkColumn} as DATE) > \nCAST('@{item().WatermarkValue}' as DATE)\nAND\nCAST(@{item().WatermarkColumn} as DATE) <=\nCAST('@{activity('GET_MAX_SQL').output.firstRow.MAXD}' as DATE)",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_ONPREM_SQLSERVER",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ASQL_TGT_PARAMETERIZED",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@{item().DST_tab}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "UPDATE_WATERMARK_SQL",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "COPY SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_UpdateWatermark]",
										"storedProcedureParameters": {
											"id": {
												"value": "@{item().id}",
												"type": "Int16"
											},
											"NewWatermark": {
												"value": "@{activity('GET_MAX_SQL').output.firstRow.MAXD}",
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_TGT_OLAP",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"ConfigTable": {
						"type": "string",
						"defaultValue": "dbo.cfg"
					}
				},
				"folder": {
					"name": "Momentive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ONPREM_SQLSERVER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LOAD_DELTA_SQL_AND_PG')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GET_CFG",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * from @{pipeline().parameters.ConfigTable}\nIF @@ROWCOUNT = 0 THROW 50000,'No rows in configuration table!',1"
							},
							"dataset": {
								"referenceName": "DS_ASQL_TGT_PARAMETERIZED",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "dummy"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR_EACH_SQL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "SQL_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('SQL_CFG').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GET_MAX_SQL",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "SELECT MAX(CAST(@{item().WatermarkColumn} as date)) as maxd FROM @{item().SRC_tab}"
										},
										"dataset": {
											"referenceName": "DS_ONPREM_SQLSERVER",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "COPY SQL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_MAX_SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "SELECT \n @{item().Cols} FROM @{item().SRC_tab} \n \nWHERE \n\nCAST(@{item().WatermarkColumn} as DATE) > \nCAST('@{item().WatermarkValue}' as DATE)\nAND\nCAST(@{item().WatermarkColumn} as DATE) <=\nCAST('@{activity('GET_MAX_SQL').output.firstRow.MAXD}' as DATE)",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_ONPREM_SQLSERVER",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ASQL_TGT_PARAMETERIZED",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@{item().DST_tab}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "UPDATE_WATERMARK_SQL",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "COPY SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_UpdateWatermark]",
										"storedProcedureParameters": {
											"id": {
												"value": "@{item().id}",
												"type": "Int16"
											},
											"NewWatermark": {
												"value": "@{activity('GET_MAX_SQL').output.firstRow.MAXD}",
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_TGT_OLAP",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SQL_CFG",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().SRC_name,'SQLS')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "FOR_EACH_PG",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "PG_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('PG_CFG').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "GET_MAX_PG",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlSource",
											"query": "SELECT MAX(CAST(@{item().WatermarkColumn} as date)) as maxd FROM @{item().SRC_tab}"
										},
										"dataset": {
											"referenceName": "DS_ONPREM_POSTGRES",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "COPY_PG_SQL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "GET_MAX_PG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlSource",
											"query": {
												"value": "SELECT \n @{item().Cols} FROM @{item().SRC_tab} \n \nWHERE \n\nCAST(@{item().WatermarkColumn} as DATE) > \nCAST('@{item().WatermarkValue}' as DATE)\nAND\nCAST(@{item().WatermarkColumn} as DATE) <=\nCAST('@{activity('GET_MAX_PG').output.firstRow.MAXD}' as DATE)",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "DS_ONPREM_POSTGRES",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_ASQL_TGT_PARAMETERIZED",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@{item().DST_tab}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "UPDATE_WATERMARK_PG_SQL",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "COPY_PG_SQL",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_UpdateWatermark]",
										"storedProcedureParameters": {
											"id": {
												"value": "@{item().id}",
												"type": "Int16"
											},
											"NewWatermark": {
												"value": "@{activity('GET_MAX_PG').output.firstRow.MAXD}",
												"type": "DateTime"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_ASQL_TGT_OLAP",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "PG_CFG",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "GET_CFG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GET_CFG').output.value",
								"type": "Expression"
							},
							"condition": {
								"value": "@equals(item().SRC_name,'PG')",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"ConfigTable": {
						"type": "string",
						"defaultValue": "dbo.cfg"
					}
				},
				"folder": {
					"name": "Momentive"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_ONPREM_SQLSERVER')]",
				"[concat(variables('factoryId'), '/datasets/DS_ONPREM_POSTGRES')]"
			]
		}
	]
}